unit fmain;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs,
  uApeEngine, uVector, uRenderer, uRenderer.FMX, uCar, uBridge, uSurfaces, uCapsule,
  uSwingDoor, uRotator;

type
  TLevel = class;
  TFormCar = class(TForm)
    procedure FormCreate(Sender: TObject);
    procedure FormKeyUp(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure FormKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
  private
    { Private declarations }
    function IsKeyDown(k: Char): boolean; Overload;
    function IsKeyDown(w: Word): boolean; Overload;

  public
    Keys: array[word] of boolean;
    { Public declarations }
    TheLevel : TLevel;
    Renderer : TFMXRenderer;
  end;

  TLevel = Class
  protected
    R : TAbstractRenderer;
  Public
    //buf : TBitmap;
    Ape : TApeEngine;
    aSurface : TSurfaces;
    aBridge : TBridge;
    aCar : TCar;
    aCapsule : TCapsule;
    aSwingDoor : TSwingDoor;
    aRotator : TRotator;

    Constructor Create(aRenderer : TAbstractRenderer); Virtual;
    Destructor Destroy; Override;
  End;


var
  FormCar: TFormCar;

implementation

{$R *.fmx}

procedure TFormCar.FormCreate(Sender: TObject);
begin
  Renderer :=  TFMXRenderer.Create(Canvas);
  TheLevel :=  TLevel.Create(Renderer);
end;

{ TLevel }

constructor TLevel.Create(aRenderer : TAbstractRenderer);
begin
  Assert(Assigned(aRenderer));
  R := aRenderer;
  Ape := TApeEngine.Create;
  // Initialize the engine. The argument here is the time step value.
	// Higher values scale the forces in the sim, making it appear to run
	// faster or slower. Lower values result in more accurate simulations.
  Ape.Init(1/4);

	// gravity -- particles of varying masses are affected the same
  Ape.AddMasslessForce(Vector(0,3));

  aSurface := TSurfaces.Create(R,Ape);
	Ape.addGroup(aSurface);
	aBridge := TBridge.Create(R,Ape);
	Ape.addGroup(aBridge);

	acapsule := TCapsule.Create(R,Ape);
	APe.addGroup(acapsule);

	arotator := TRotator.Create(R,Ape);
	APE.addGroup(arotator);

	aswingDoor := TSwingDoor.create(R,Ape);
	APE.addGroup(aswingDoor);

	aCar := TCar.Create(R,Ape);
	Ape.addGroup(aCar);

  aCar.AddCollidable(aSurface);
  aCar.AddCollidable(aBridge);
  aCar.AddCollidable(aCapsule);
  aCar.AddCollidable(aSwingDoor);
  aCar.AddCollidable(aRotator);

  aCapsule.AddCollidable(aSurface);
  aCapsule.AddCollidable(aBridge);
  aCapsule.AddCollidable(aSwingDoor);
  aCapsule.AddCollidable(aRotator);

//  DoubleBuffered := true;
//  InitKeyboard;
end;

destructor TLevel.Destroy;
begin

  inherited;
end;

function TFormCar.IsKeyDown(k: Char): boolean;
var
  w : Word;
begin
  w := ord(upcase(k));
  result := IsKeyDown(w);
end;

function TFormCar.IsKeyDown(w: Word): boolean;
begin
  result := Keys[w];
end;

procedure TFormCar.FormKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  Keys[key] := True;
end;

procedure TFormCar.FormKeyUp(Sender: TObject; var Key: Word; var KeyChar: Char;
  Shift: TShiftState);
begin
  Keys[key] := false;
end;

end.
